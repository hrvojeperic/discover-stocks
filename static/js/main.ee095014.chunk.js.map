{"version":3,"sources":["reportWebVitals.js","resources/iex_api.js","resources/stock.js","resources/binance.js","components/DiscoverStocks.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","IEX_API","apiToken","baseUrl","stock","getSymbol","callback","url","fetch","response","ok","json","Error","arr","catch","error","console","log","BINANCE","DiscoverStocks","props","randomInteger","upperLimit","Math","floor","random","_generateRandomStock","symbolArr","newTicker","length","symbol","setState","tickerArray","ticker","binanceUrl","generateRandomStock","newStock","randNum","state","stockPrice","document","title","body","style","this","className","target","rel","href","onClick","window","open","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"gMAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,4BCDCQ,EALC,CACZC,SAAU,sCACVC,QAAS,oCCoCEC,EArCD,CAGVC,UAAW,SAACC,GACR,IAAMC,EAAG,UAAMN,EAAQE,QAAd,0CAAuDF,EAAQC,UACxEM,MAAMD,GACLZ,MAAK,SAACc,GACH,GAAIA,EAASC,GACT,OAAOD,EAASE,OAGhB,MAAM,IAAIC,MAAM,8BAGvBjB,MAAK,SAACkB,GACHP,EAASO,MAEZC,OAAM,SAACC,GACJC,QAAQC,IAAIF,QCfTG,EAJC,CACZf,QAAS,qCC4FEgB,G,wDAtFX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAmBVC,cAAgB,SAACC,GACb,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,IArBnB,EAwBnBI,qBAAuB,SAACC,GACpB,IACMC,EAAYD,EADF,EAAKN,cAAcM,EAAUE,SACRC,OACrC,EAAKC,SAAS,CACVC,YAAaL,EACbM,OAAQL,EACRM,WAAYhB,EAAQf,QAAUyB,KA9BnB,EAoCnBO,oBAAsB,WAClB/B,EAAMC,UAAU,EAAKqB,uBArCN,EAyCnBU,SAAW,WACP,IAAMC,EAAU,EAAKhB,cAAc,EAAKiB,MAAMN,YAAYH,QACpDD,EAAY,EAAKU,MAAMN,YAAYK,GAASP,OAClD,EAAKC,SAAS,CACVE,OAAQL,EACRM,WAAYhB,EAAQf,QAAUyB,KA5ClC,EAAKU,MAAQ,CACTL,OAAQ,GACRM,WAAY,GACZL,WAAY,GACZF,YAAa,IANF,E,gEAafQ,SAASC,MAAQ,kBACjBD,SAASE,KAAKC,MAAQ,uBAEtBC,KAAKT,wB,+BA+CC,IAAD,OACL,OACI,gCACI,8BACI,mBAAGU,UAAU,aAAaC,OAAO,SAASC,IAAI,sBAAsBC,KAAM,iCAA1E,sCAEJ,sBAAKH,UAAU,WAAf,UACI,qBAAKA,UAAU,SAAf,SACI,oBAAIA,UAAU,QAAd,6BAEJ,qBAAKA,UAAU,YAAYI,QAAS,kBAAKC,OAAOC,KAAK,EAAKb,MAAMJ,WAAY,WAA5E,SACI,oBAAIW,UAAU,aAAd,SAA4BD,KAAKN,MAAML,WAE3C,qBAAKY,UAAU,YAAYI,QAAS,kBAAM,EAAKb,YAA/C,SACI,oBAAIS,UAAU,aAAd,kC,GA/EKO,cCC7BC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFf,SAASgB,eAAe,SAM1BhE,M","file":"static/js/main.ee095014.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// api base url and token\r\nconst IEX_API = {\r\n    apiToken: 'pk_d2db7964a6dc4ce5b0f6391985be9005',\r\n    baseUrl: 'https://cloud.iexapis.com/stable'\r\n};\r\n\r\nexport default IEX_API;","import IEX_API from '../resources/iex_api';\r\n\r\nconst stock = {\r\n    \r\n    // fetch crypto symbol array from api\r\n    getSymbol: (callback) => {\r\n        const url = `${IEX_API.baseUrl}/ref-data/crypto/symbols?token=${IEX_API.apiToken}`;\r\n        fetch(url)\r\n        .then((response) => {\r\n            if (response.ok) { // check for errors\r\n                return response.json();\r\n            }\r\n            else {\r\n                throw new Error(\"Error with API request.\");\r\n            }\r\n        })\r\n        .then((arr) => {\r\n            callback(arr);\r\n        })\r\n        .catch((error) => { // catch and print error message\r\n            console.log(error);\r\n        });\r\n    },\r\n\r\n    /*\r\n    // api data not loading\r\n    getPrice: (symbol, callback) => {\r\n        const url = `${IEX_API.baseUrl}/crypto/${symbol}/price&token=${IEX_API.apiToken}`;\r\n        console.log(url)\r\n        fetch(url)\r\n        .then((response) => response.json())\r\n        .then((result) => {\r\n            console.log(result);\r\n        })\r\n    }\r\n    */\r\n\r\n}\r\n\r\nexport default stock;","// base url for more info about stock\r\nconst BINANCE = {\r\n    baseUrl: 'https://www.binance.com/en/trade/'\r\n};\r\n\r\nexport default BINANCE;","import React, { Component } from 'react';\r\nimport stock from '../resources/stock';\r\nimport BINANCE from '../resources/binance';\r\nimport '../styles/stockStyles.css';\r\n\r\n// main component for displaying stocks\r\nclass DiscoverStocks extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            ticker: '',\r\n            stockPrice: '',\r\n            binanceUrl: '',\r\n            tickerArray: []\r\n        }\r\n    }\r\n\r\n    // set up page when component is rendered in\r\n    componentDidMount() {\r\n        // set tab title and page color\r\n        document.title = \"Discover Stocks\";\r\n        document.body.style = 'background: #3b3f47;';\r\n        // generate stock from api\r\n        this.generateRandomStock(); \r\n    }\r\n\r\n    // returns random integer bounded by upper limit\r\n    randomInteger = (upperLimit) => {\r\n        return Math.floor(Math.random() * upperLimit);\r\n    }\r\n\r\n    _generateRandomStock = (symbolArr) => {\r\n        const randNum = this.randomInteger(symbolArr.length);\r\n        const newTicker = symbolArr[randNum].symbol;\r\n        this.setState({\r\n            tickerArray: symbolArr,\r\n            ticker: newTicker,\r\n            binanceUrl: BINANCE.baseUrl + newTicker\r\n        });\r\n        // this.generateStockPrice(); // api data not loading\r\n    }\r\n\r\n    // requests data from api to generate new stock\r\n    generateRandomStock = () => {\r\n        stock.getSymbol(this._generateRandomStock);\r\n    }\r\n\r\n    // generate new stock after first api request\r\n    newStock = () => {\r\n        const randNum = this.randomInteger(this.state.tickerArray.length);\r\n        const newTicker = this.state.tickerArray[randNum].symbol;\r\n        this.setState({\r\n            ticker: newTicker,\r\n            binanceUrl: BINANCE.baseUrl + newTicker\r\n        });\r\n    }\r\n\r\n    /*\r\n    // api data not loading\r\n    _generateStockPrice = (price) => {\r\n        this.setState({\r\n            stockPrice: price\r\n        });\r\n    }\r\n\r\n    generateStockPrice = () => {\r\n        stock.getPrice(this.state.ticker, this._generateStockPrice);\r\n    }\r\n    */\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <a className=\"githubLink\" target=\"_blank\" rel=\"noopener noreferrer\" href={'https://github.com/hrvojeperic'}>github.com/hrvojeperic</a>\r\n                </div>\r\n                <div className=\"stockBox\">\r\n                    <div className=\"topBox\">\r\n                        <h1 className=\"title\">Crypto Ticker</h1>\r\n                    </div>\r\n                    <div className=\"middleBox\" onClick={()=> window.open(this.state.binanceUrl, \"_blank\")}>\r\n                        <h2 className=\"tickerName\">{this.state.ticker}</h2>\r\n                    </div>\r\n                    <div className=\"bottomBox\" onClick={() => this.newStock()}>\r\n                        <h3 className=\"buttonName\">Generate</h3>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default DiscoverStocks;","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\n//import App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport DiscoverStocks from './components/DiscoverStocks';\n\nReactDOM.render(\n  <React.StrictMode>\n    <DiscoverStocks />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}